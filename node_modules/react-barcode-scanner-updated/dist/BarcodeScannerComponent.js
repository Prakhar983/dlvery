"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const library_1 = require("@zxing/library");
const react_webcam_1 = __importDefault(require("react-webcam"));
const BarcodeScannerComponent = ({ onUpdate, onError, width = '100%', height = '100%', facingMode = 'environment', 
// torch,
delay = 500, videoConstraints, stopStream }) => {
    const webcamRef = react_1.default.useRef(null);
    const capture = react_1.default.useCallback(() => {
        var _a;
        const codeReader = new library_1.BrowserMultiFormatReader();
        const imageSrc = (_a = webcamRef === null || webcamRef === void 0 ? void 0 : webcamRef.current) === null || _a === void 0 ? void 0 : _a.getScreenshot();
        if (imageSrc) {
            codeReader
                .decodeFromImage(undefined, imageSrc)
                .then((result) => {
                onUpdate(null, result);
            })
                .catch((err) => {
                onUpdate(err);
            });
        }
    }, [onUpdate]);
    // React.useEffect(() => {
    //   // Turn on the flashlight if prop is defined and device has the capability
    //   if (
    //     typeof torch === 'boolean' &&
    //     navigator?.mediaDevices?.getSupportedConstraints().
    //   ) {
    //     const stream = webcamRef?.current?.video.srcObject
    //     const track = stream?.getVideoTracks()[0] // get the active track of the stream
    //     if (
    //       track &&
    //       track.getCapabilities().torch &&
    //       !track.getConstraints().torch
    //     ) {
    //       track
    //         .applyConstraints({
    //           advanced: [{ torch }]
    //         })
    //         .catch((err: unknown) => onUpdate(err))
    //     }
    //   }
    // }, [torch, onUpdate])
    (0, react_1.useEffect)(() => {
        var _a;
        if (stopStream) {
            let stream = (_a = webcamRef === null || webcamRef === void 0 ? void 0 : webcamRef.current) === null || _a === void 0 ? void 0 : _a.video.srcObject;
            if (stream) {
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                stream.getTracks().forEach((track) => {
                    stream.removeTrack(track);
                    track.stop();
                });
                stream = null;
            }
        }
    }, [stopStream]);
    (0, react_1.useEffect)(() => {
        const interval = setInterval(capture, delay);
        return () => {
            clearInterval(interval);
        };
    }, []);
    return (react_1.default.createElement(react_webcam_1.default, { width: width, height: height, ref: webcamRef, screenshotFormat: "image/jpeg", videoConstraints: videoConstraints || {
            facingMode
        }, audio: false, onUserMediaError: onError }));
};
exports.default = BarcodeScannerComponent;
